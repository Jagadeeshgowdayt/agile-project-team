name: Safe Performance Test üöÄ

on:
  push:
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
  workflow_dispatch:

jobs:
  safe-performance-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start Simple HTTP Server üåê
        run: |
          python3 -m http.server 8000 &
          sleep 3  # wait for server to start

      - name: Safe Performance Tests üß™
        run: |
          set +e  # don't exit on errors

          echo "Running page load time test..."
          LOAD_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:8000/index.html 2>/dev/null)
          echo "Page Load Time: ${LOAD_TIME}s"
          if [[ -z "$LOAD_TIME" ]]; then
            echo "‚ö†Ô∏è Could not measure page load time."
          elif (( $(echo "$LOAD_TIME > 1.0" | bc -l) )); then
            echo "‚ö†Ô∏è Page load time is high: $LOAD_TIME"
          else
            echo "‚úÖ Page load time is good!"
          fi

          echo ""
          echo "Running Time To First Byte (TTFB) test..."
          TTFB=$(curl -s -w "%{time_starttransfer}" -o /dev/null http://localhost:8000/index.html 2>/dev/null)
          echo "TTFB: ${TTFB}s"
          if [[ -z "$TTFB" ]]; then
            echo "‚ö†Ô∏è Could not measure TTFB."
          elif (( $(echo "$TTFB > 0.5" | bc -l) )); then
            echo "‚ö†Ô∏è TTFB is high: $TTFB"
          else
            echo "‚úÖ TTFB is good!"
          fi

          echo ""
          echo "Running resource size check..."
          for FILE in $(find . -name '*.js' -o -name '*.css'); do
            if [ -f "$FILE" ]; then
              SIZE_KB=$(du -k "$FILE" | cut -f1)
              echo "$FILE: ${SIZE_KB}KB"
              if [ "$SIZE_KB" -gt 100 ]; then
                echo "‚ö†Ô∏è $FILE is large. Consider reducing size."
              fi
            fi
          done

          echo ""
          echo "Checking for image sizes..."
          for IMG in $(find . -name '*.png' -o -name '*.jpg' -o -name '*.jpeg'); do
            if [ -f "$IMG" ]; then
              IMG_SIZE=$(du -k "$IMG" | cut -f1)
              echo "$IMG: ${IMG_SIZE}KB"
              if [ "$IMG_SIZE" -gt 300 ]; then
                echo "‚ö†Ô∏è Large image detected: $IMG"
              fi
            fi
          done

          echo ""
          echo "‚úÖ All performance tests completed successfully!"
          exit 0  # FORCE SUCCESS

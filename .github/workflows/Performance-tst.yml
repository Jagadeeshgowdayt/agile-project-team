name: "üß™ Frontend Performance & Best Practices Checks"

on:
  push:
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
  workflow_dispatch:

jobs:
  performance-and-practices:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize warnings collector
        run: |
          set +e
          echo "WARNINGS=" >> $GITHUB_ENV

      - name: JS/CSS File Size Check
        run: |
          echo "üîç Checking JS/CSS file sizes..."
          for FILE in $(find . -maxdepth 1 -name '*.js' -o -name '*.css'); do
            [ -f "$FILE" ] || continue
            SIZE_KB=$(du -k "$FILE" | cut -f1)
            echo "  ‚Ä¢ $FILE: ${SIZE_KB}KB"
            if [ "$SIZE_KB" -gt 100 ]; then
              echo "‚ö†Ô∏è $FILE is larger than 100KB."
              echo "‚ö†Ô∏è $FILE >100KB" >> warnings.txt
            fi
          done

      - name: Image Size Check
        run: |
          echo "üîç Checking image file sizes..."
          for IMG in $(find . -maxdepth 1 -name '*.png' -o -name '*.jpg' -o -name '*.jpeg'); do
            [ -f "$IMG" ] || continue
            IMG_SIZE_KB=$(du -k "$IMG" | cut -f1)
            echo "  ‚Ä¢ $IMG: ${IMG_SIZE_KB}KB"
            if [ "$IMG_SIZE_KB" -gt 300 ]; then
              echo "‚ö†Ô∏è $IMG is larger than 300KB."
              echo "‚ö†Ô∏è $IMG >300KB" >> warnings.txt
            fi
          done

      - name: HTML File Size Check
        run: |
          echo "üîç Checking HTML file sizes..."
          for HTML in $(find . -maxdepth 1 -name '*.html'); do
            [ -f "$HTML" ] || continue
            HTML_SIZE_KB=$(du -k "$HTML" | cut -f1)
            echo "  ‚Ä¢ $HTML: ${HTML_SIZE_KB}KB"
            if [ "$HTML_SIZE_KB" -gt 200 ]; then
              echo "‚ö†Ô∏è $HTML is larger than 200KB."
              echo "‚ö†Ô∏è $HTML >200KB" >> warnings.txt
            fi
          done

      - name: Inline JS/CSS Check
        run: |
          echo "üîç Checking for inline <script> or styles..."
          INLINE_JS=$(grep -R "<script>[^<]" . || true)
          INLINE_CSS=$(grep -R "style=" . || true)
          [ -n "$INLINE_JS" ] && echo "‚ö†Ô∏è Inline <script> found." && echo "‚ö†Ô∏è Inline <script>" >> warnings.txt
          [ -n "$INLINE_CSS" ] && echo "‚ö†Ô∏è Inline style attribute found." && echo "‚ö†Ô∏è Inline style" >> warnings.txt

      - name: Minification Check
        run: |
          echo "üîç Checking if assets are minified..."
          for FILE in *.js *.css; do
            [ -f "$FILE" ] || continue
            if ! echo "$FILE" | grep -qE "\.min\."; then
              echo "‚ö†Ô∏è $FILE may not be minified."
              echo "‚ö†Ô∏è Unminified $FILE" >> warnings.txt
            fi
          done

      - name: Script Tag defer/async Check
        run: |
          echo "üîç Checking <script> tags for defer/async..."
          MISSING=$(grep -R "<script" . | grep -vE "defer|async" || true)
          [ -n "$MISSING" ] && echo "‚ö†Ô∏è Some <script> tags missing defer/async." && echo "‚ö†Ô∏è Missing defer/async" >> warnings.txt

      - name: console.log Check
        run: |
          echo "üîç Checking for console.log calls..."
          LOGS=$(grep -R "console.log" . || true)
          [ -n "$LOGS" ] && echo "‚ö†Ô∏è console.log found in code." && echo "‚ö†Ô∏è console.log left" >> warnings.txt

      - name: DOM Size Check
        run: |
          echo "üîç Checking DOM node count (index.html)..."
          if [ -f "index.html" ]; then
            COUNT=$(grep -o "<[a-zA-Z]" index.html | wc -l)
            echo "  ‚Ä¢ index.html has $COUNT tags"
            if [ "$COUNT" -gt 300 ]; then
              echo "‚ö†Ô∏è Too many DOM nodes (>300)."
              echo "‚ö†Ô∏è DOM nodes: $COUNT" >> warnings.txt
            fi
          else
            echo "‚ÑπÔ∏è index.html not found; skipped DOM size check."
          fi

      - name: JS Function Complexity Heuristic
        run: |
          echo "üîç Analyzing JS for nested loops/large functions..."
          for FILE in $(find . -name '*.js'); do
            NESTED=$(grep -Pzo 'for\s*ÓÄÅ.*?ÓÄÅ\s*{[^{}]*{[^{}]*}' "$FILE" | wc -l)
            [ "$NESTED" -gt 0 ] && echo "‚ö†Ô∏è Nested loops in $FILE." && echo "‚ö†Ô∏è Nested loops in $FILE" >> warnings.txt
            LONGFUNCS=$(awk '/function /{c=0;f=1;next}/}/{if(f)c++; if(c>30)print FILENAME\" has long function\"; f=0}' "$FILE")
            [ -n "$LONGFUNCS" ] && echo "‚ö†Ô∏è $LONGFUNCS" && echo "‚ö†Ô∏è $LONGFUNCS" >> warnings.txt
          done

      - name: JS Memory Usage Estimate
        run: |
          echo "üîç Estimating Node.js heap usage..."
          MEM=$(node -e "const u=process.memoryUsage(); console.log(Math.round(u.heapUsed/1024/1024)+'MB');")
          echo "  ‚Ä¢ Heap used: $MEM"
          # No threshold here‚Äîjust informative

      - name: Simulate CPU Load
        run: |
          echo "üîß Simulating CPU load for 30s..."
          timeout 30s bash -c "while :; do :; done" || true
          echo "  ‚Ä¢ CPU simulation done"

      - name: Show Summary of Issues
        run: |
          echo "üèÅ Summary of Issues:"
          if [ -f warnings.txt ]; then
            cat warnings.txt
          else
            echo "‚úÖ No issues detected!"
          fi

      - name: Force Workflow Success
        run: |
          echo "‚úÖ Workflow completed ‚Äî no errors will stop it."
          exit 0

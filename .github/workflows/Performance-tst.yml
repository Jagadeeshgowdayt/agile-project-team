name: "üß™ Frontend Performance & Best Practices Checks"

on: push: paths: - '/*.html' - '/.css' - '**/.js' workflow_dispatch:

jobs: performance-and-practices: runs-on: ubuntu-latest timeout-minutes: 30

steps:
  - name: Checkout code
    uses: actions/checkout@v3

  - name: Initialize warnings collector
    run: |
      set +e
      echo "" > warnings.txt

  - name: JS/CSS File Size Check üì¶
    run: |
      echo "üîç Checking JS/CSS file sizes..."
      for FILE in $(find . -maxdepth 1 -name '*.js' -o -name '*.css'); do
        [ -f "$FILE" ] || continue
        SIZE_KB=$(du -k "$FILE" | cut -f1)
        echo "  ‚Ä¢ $FILE: ${SIZE_KB}KB"
        if [ "$SIZE_KB" -gt 100 ]; then
          echo "‚ö†Ô∏è $FILE is larger than 100KB." >> warnings.txt
        fi
      done
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Image Size Check üñºÔ∏è
    run: |
      echo "üîç Checking image file sizes..."
      for IMG in $(find . -maxdepth 1 -name '*.png' -o -name '*.jpg' -o -name '*.jpeg'); do
        [ -f "$IMG" ] || continue
        IMG_SIZE_KB=$(du -k "$IMG" | cut -f1)
        echo "  ‚Ä¢ $IMG: ${IMG_SIZE_KB}KB"
        if [ "$IMG_SIZE_KB" -gt 300 ]; then
          echo "‚ö†Ô∏è $IMG is larger than 300KB." >> warnings.txt
        fi
      done
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: HTML File Size Check üìÑ
    run: |
      echo "üîç Checking HTML file sizes..."
      for HTML in $(find . -maxdepth 1 -name '*.html'); do
        [ -f "$HTML" ] || continue
        HTML_SIZE_KB=$(du -k "$HTML" | cut -f1)
        echo "  ‚Ä¢ $HTML: ${HTML_SIZE_KB}KB"
        if [ "$HTML_SIZE_KB" -gt 200 ]; then
          echo "‚ö†Ô∏è $HTML is larger than 200KB." >> warnings.txt
        fi
      done
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Inline JS/CSS Check üìù
    run: |
      echo "üîç Checking for inline <script> or styles..."
      INLINE_JS=$(grep -R "<script>[^<]" . || true)
      INLINE_CSS=$(grep -R "style=" . || true)
      [ -n "$INLINE_JS" ] && echo "‚ö†Ô∏è Inline <script> found." >> warnings.txt
      [ -n "$INLINE_CSS" ] && echo "‚ö†Ô∏è Inline style attribute found." >> warnings.txt
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Minification Check ‚öôÔ∏è
    run: |
      echo "üîç Checking if assets are minified..."
      for FILE in *.js *.css; do
        [ -f "$FILE" ] || continue
        if ! echo "$FILE" | grep -qE "\.min\."; then
          echo "‚ö†Ô∏è $FILE may not be minified." >> warnings.txt
        fi
      done
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Script Tag defer/async Check ‚ö°
    run: |
      echo "üîç Checking <script> tags for defer/async..."
      MISSING=$(grep -R "<script" . | grep -vE "defer|async" || true)
      [ -n "$MISSING" ] && echo "‚ö†Ô∏è Some <script> tags missing defer/async." >> warnings.txt
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: console.log Check üêû
    run: |
      echo "üîç Checking for console.log calls..."
      LOGS=$(grep -R "console.log" . || true)
      [ -n "$LOGS" ] && echo "‚ö†Ô∏è console.log found in code." >> warnings.txt
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: DOM Size Check üå≥
    run: |
      echo "üîç Checking DOM node count (index.html)..."
      if [ -f "index.html" ]; then
        COUNT=$(grep -o "<[a-zA-Z]" index.html | wc -l)
        echo "  ‚Ä¢ index.html has $COUNT tags"
        [ "$COUNT" -gt 300 ] && echo "‚ö†Ô∏è Too many DOM nodes (>300)." >> warnings.txt
      else
        echo "‚ÑπÔ∏è index.html not found; skipped DOM size check."
      fi
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Memory Usage Estimate üß†
    run: |
      echo "üîç Estimating Node.js heap usage..."
      MEM=$(node -e "const u=process.memoryUsage(); console.log(Math.round(u.heapUsed/1024/1024)+'MB');")
      echo "  ‚Ä¢ Heap used: $MEM"
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Simulate CPU Load üîÑ
    run: |
      echo "üîß Simulating CPU load for 30s..."
      timeout 30s bash -c "while :; do :; done" || true
      echo "  ‚Ä¢ CPU simulation done"
      DELAY=$((RANDOM % 190 + 10))
      echo "Simulating work: sleeping for ${DELAY}s"
      sleep ${DELAY}

  - name: Show Summary of Issues üèÅ
    run: |
      echo "üèÅ Summary of Issues:"
      if [ -f warnings.txt ]; then
        cat warnings.txt
      else
        echo "‚úÖ No issues detected!"
      fi

  - name: Force Workflow Success ‚úÖ
    run: |
      echo "‚úÖ Completed all checks. This workflow always passes."
      exit 0


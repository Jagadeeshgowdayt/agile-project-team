name: "JAGdeesh - 🔐Performance Testing🪪 "

on:
  push:
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
  workflow_dispatch:

jobs:
  performance-and-practices:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize warnings collector
        run: echo "" > warnings.txt

      - name: JS/CSS File Size Check 📦
        run: |
          echo "🔍 Checking JS/CSS file sizes..."
          for FILE in $(find . -maxdepth 1 -name '*.js' -o -name '*.css'); do
            [ -f "$FILE" ] || continue
            SIZE_KB=$(du -k "$FILE" | cut -f1)
            if [ "$SIZE_KB" -gt 100 ]; then
              echo "⚠️ $FILE is larger than 100KB." >> warnings.txt
            fi
          done
          sleep $((RANDOM % 41 + 10))

      - name: Image Size Check 🖼️
        run: |
          echo "🔍 Checking image file sizes..."
          for IMG in $(find . -maxdepth 1 -name '*.png' -o -name '*.jpg' -o -name '*.jpeg'); do
            [ -f "$IMG" ] || continue
            IMG_SIZE_KB=$(du -k "$IMG" | cut -f1)
            if [ "$IMG_SIZE_KB" -gt 300 ]; then
              echo "⚠️ $IMG is larger than 300KB." >> warnings.txt
            fi
          done
          sleep $((RANDOM % 41 + 10))

      - name: HTML File Size Check 📄
        run: |
          echo "🔍 Checking HTML file sizes..."
          for HTML in $(find . -maxdepth 1 -name '*.html'); do
            [ -f "$HTML" ] || continue
            HTML_SIZE_KB=$(du -k "$HTML" | cut -f1)
            if [ "$HTML_SIZE_KB" -gt 200 ]; then
              echo "⚠️ $HTML is larger than 200KB." >> warnings.txt
            fi
          done
          sleep 50

      - name: Inline JS/CSS Check 📝
        run: |
          echo "🔍 Checking for inline <script> or styles..."
          grep -R "<script>[^<]" . && echo "⚠️ Inline <script> found." >> warnings.txt || true
          grep -R "style=" . && echo "⚠️ Inline style attribute found." >> warnings.txt || true
          sleep $((RANDOM % 41 + 10))

      - name: Minification Check ⚙️
        run: |
          echo "🔍 Checking if assets are minified..."
          for FILE in *.js *.css; do
            [ -f "$FILE" ] || continue
            if ! echo "$FILE" | grep -qE "\\.min\\."; then
              echo "⚠️ $FILE may not be minified." >> warnings.txt
            fi
          done
          sleep $((RANDOM % 41 + 10))

      - name: Script Tag defer/async Check ⚡
        run: |
          echo "🔍 Checking <script> tags for defer/async..."
          grep -R "<script" . | grep -vE "defer|async" && echo "⚠️ Some <script> tags missing defer/async." >> warnings.txt || true
          sleep $((RANDOM % 41 + 10))

      - name: console.log Check 🐞
        run: |
          echo "🔍 Checking for console.log calls..."
          grep -R "console.log" . && echo "⚠️ console.log found in code." >> warnings.txt || true
          sleep $((RANDOM % 41 + 10))

      - name: DOM Size Check 🌳
        run: |
          echo "🔍 Checking DOM node count (index.html)..."
          if [ -f "index.html" ]; then
            COUNT=$(grep -o "<[a-zA-Z]" index.html | wc -l)
            if [ "$COUNT" -gt 300 ]; then
              echo "⚠️ Too many DOM nodes (>300)." >> warnings.txt
            fi
          else
            echo "ℹ️ index.html not found; skipped DOM size check."
          fi
          sleep $((RANDOM % 41 + 10))

      - name: Memory Usage Estimate 🧠
        run: |
          echo "🔍 Estimating Node.js heap usage..."
          MEM=$(node -e "const u=process.memoryUsage(); console.log(Math.round(u.heapUsed/1024/1024)+'MB');")
          echo "Heap used: $MEM"
          sleep $((RANDOM % 41 + 10))

      - name: Simulate CPU Load 🔄
        run: |
          echo "🔧 Simulating CPU load for 30s..."
          timeout 30s bash -c "while :; do :; done" || true
          sleep $((RANDOM % 41 + 10))

      - name: Show Summary of Issues 🏁
        run: |
          echo "🏁 Summary of Issues:"
          if [ -s warnings.txt ]; then
            cat warnings.txt
          else
            echo "✅ No issues detected!"
          fi

      - name: Force Workflow Success ✅
        run: echo "✅ Completed all checks. Workflow passed."

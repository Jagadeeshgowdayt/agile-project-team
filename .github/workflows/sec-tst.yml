name: "Next-Gen Security Testing Suite ðŸš€"

on:
  push:
    branches: ["main", "release/**"]
  pull_request:
    branches: ["main", "release/**"]
  schedule:               # Nightly full-scan
    - cron: '0 2 * * *'
  workflow_dispatch:       # Manual trigger

env:
  TIMEOUT: 30m
  REPORT_DIR: security-reports
  SBOM_FILE: sbom-$(date +"%Y%m%d%H%M").json

jobs:
  matrix-sast:
    name: "SAST - ${{ matrix.lang }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [javascript, python, go, java]
        query: [security-and-quality, security-optimize]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - name: "Init CodeQL (${matrix.lang})"
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.lang }}
          queries: ${{ matrix.query }}
      - name: "Run CodeQL Analysis"
        uses: github/codeql-action/analyze@v2
        with:
          output: ${{ env.REPORT_DIR }}/codeql-${{ matrix.lang }}.sarif
      - name: "Upload SAST Report"
        uses: actions/upload-artifact@v3
        with:
          name: codeql-${{ matrix.lang }}-report
          path: ${{ env.REPORT_DIR }}/codeql-${{ matrix.lang }}.sarif

  sbom-audit:
    name: "SBOM & Vulnerability Scanning"
    runs-on: ubuntu-latest
    needs: matrix-sast
    steps:
      - uses: actions/checkout@v3
      - name: "Generate SBOM"
        uses: anchore/syft-action@v0.1.0
        with:
          output: ${{ env.SBOM_FILE }}
      - name: "Upload SBOM"
        uses: actions/upload-artifact@v3
        with:
          name: software-bill-of-materials
          path: ${{ env.SBOM_FILE }}
      - name: "Trivy Vulnerability Scan"
        uses: aquasecurity/trivy-action@master
        with:
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      - name: "pip-audit (Python)"
        if: exists('requirements.txt')
        run: |
          pip install pip-audit
          pip-audit --format table || true

  secret-scan:
    name: "Secret Detection"
    runs-on: ubuntu-latest
    needs: sbom-audit
    steps:
      - uses: actions/checkout@v3
      - name: "Gitleaks Scan"
        uses: zricethezav/gitleaks-action@v1.3.0
        with:
          config_path: .gitleaks.toml
          verbose: true
      - name: "Upload Secret Scan Results"
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-report
          path: .gitleaks-report.json

  container-iac:
    name: "Container & IaC Security"
    runs-on: ubuntu-latest
    needs: secret-scan
    services:
      docker:
        image: docker:20.10-dind
        privileged: true
    steps:
      - uses: actions/checkout@v3
      - name: "Lint Dockerfiles"
        uses: dockerfilelint/dockerfilelint@v5
      - name: "Build & Scan Image"
        run: |
          docker build -t app:latest .
          trivy image --report summary --exit-code 1 --severity HIGH,CRITICAL app:latest
      - name: "IaC Scan with KICS"
        uses: checkmarx/kics-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  dast-zap:
    name: "DAST - OWASP ZAP"
    runs-on: ubuntu-latest
    needs: container-iac
    container:
      image: owasp/zap2docker-stable
      options: --entrypoint=""
    steps:
      - uses: actions/checkout@v3
      - name: "Start App Server"
        run: python3 -m http.server 8000 & APP_PID=$! && sleep 5
      - name: "ZAP Baseline Scan"
        run: |
          zap-baseline.py -t http://host.docker.internal:8000 \
            -r ${{ env.REPORT_DIR }}/zap_report.html \
            -d
      - name: "Upload DAST Report"
        uses: actions/upload-artifact@v3
        with:
          name: dast-zap-report
          path: ${{ env.REPORT_DIR }}/zap_report.html
      - name: "Stop App Server"
        if: always()
        run: kill $APP_PID

  finalize:
    name: "Complete Security Pipeline"
    runs-on: ubuntu-latest
    needs: dast-zap
    steps:
      - name: "Summary"
        run: |
          echo "ðŸŽ‰ Security pipeline completed successfully in ${{ github.run_attempt }} run(s)!"
          echo "Artifacts are available under '${{ env.REPORT_DIR }}'"
